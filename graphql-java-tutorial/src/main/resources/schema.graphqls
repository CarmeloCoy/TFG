 type Link {
    id: ID!
    url: String!
    description: String
    postedBy: User
}


type User {
      id: ID!
      name: String!
      email: String
      password: String
    }
    
input AuthData {
	email: String!
	password: String!
}

input LinkFilter {
  description_contains: String
  url_contains: String
}

type SigninPayload {
  token: String
  user: User
}


type Vote {
    id: ID!
    createdAt: DateTime!
    user: User!
    link: Link!
}

input VoteInput{
    createdAt: DateTime!
    user: String!
    link: String!
}

scalar DateTime

type Query {
  allUsers: [User]
  allLinks(filter: LinkFilter,skip: Int = 0, first: Int = 0): [Link]
  allVotes(skip: Int = 0, first: Int = 0): [Vote]
}


type Mutation {
  createUser(name: String!, authProvider: AuthData!): User
  createLink(url: String!, description: String!, postedBy: String!): Link
  createVote(vote: VoteInput): Vote
  signinUser(auth: AuthData): SigninPayload
}

schema {
  query: Query
  mutation: Mutation
}
