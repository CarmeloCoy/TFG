type Artist {
    id: ID!
    name: String!
    startingYear: Int!
    albums: [Album!]!
    composedTracks: [Track!]!
  	lyricsTracks: [Track!]
}



type Track {
	id: ID!
	genres: [String!]!
	length: Float!
	name: String!
	artist_ids: [Artist!]!
	ratings: Rating
}

type Rating{
	score: Float!
	voters: Int!
}

input RatingInput{
	score: Float!
	voters: Int!
}

type Album1 {
	id: ID!
	formats: [String!]!
	name: String!
	releaseYear: Int!
	tracks: [Track!]!
	availabitlity: String!
	genre: String! 
}


type Album2 {
	id: ID!
	formats: [String!]!
	name: String!
	releaseYear: Int!
	tracks: [Track!]!
	availabitlity: [String!]!
	genre: String!  
}

type Album3 {
	id: ID!
	formats: [String!]!
	name: String!
	releaseYear: Int!
	tracks: [Track!]!
	availabitlity: [String!]
	genres: [String!]  
}

union Album = Album1 | Album2 | Album3

type Query{
	artist(id: ID!) : Artist
	allArtists: [Artist]!
	track(id:ID!) : Track
	allTracks: [Track]!
	album(id : ID!) : Album
	allAlbums: [Album]!
}

type Mutation{
	createArtist(name: String!, startingYear: Int!): Artist
	addTracks(id: ID!, composedTrack_ids: [ID!]!, lyricsTrack_ids: [ID!]): Artist 
	addAlbums(id:ID!, album_ids : [ID!]!): Artist
	createTrack(name: String!, lenght: Float!, genres: [String!], 
				artist_ids: [ID!]!, ratings: RatingInput): Track
	createAlbum1(formats: [String!]!, name: String!, tracks: [ID!]!,
				releaseYear: Int!, availabitlity: String! ,	genre: String!): Album
	createAlbum2(formats: [String!]!, name: String!, tracks: [ID!]!, 
				releaseYear: Int!, availabitlity: [String!]! , genre: String!): Album
	createAlbum3(formats: [String!]!, name: String!, tracks: [ID!]!, 
				releaseYear: Int!,  availabitlity: [String!]! , genres: [String!]!): Album
}



schema {
  query: Query
  mutation: Mutation
}
